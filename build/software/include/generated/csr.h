//--------------------------------------------------------------------------------
// Auto-generated by LiteX (--------) on 2025-09-12 10:24:03
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* CTRL Registers */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1

/* CTRL Fields */
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1

/* ETHPHY Registers */
#define CSR_ETHPHY_BASE (CSR_BASE + 0x800L)
#define CSR_ETHPHY_CRG_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_ETHPHY_CRG_RESET_SIZE 1
#define CSR_ETHPHY_RX_INBAND_STATUS_ADDR (CSR_BASE + 0x804L)
#define CSR_ETHPHY_RX_INBAND_STATUS_SIZE 1
#define CSR_ETHPHY_MDIO_W_ADDR (CSR_BASE + 0x808L)
#define CSR_ETHPHY_MDIO_W_SIZE 1
#define CSR_ETHPHY_MDIO_R_ADDR (CSR_BASE + 0x80cL)
#define CSR_ETHPHY_MDIO_R_SIZE 1

/* ETHPHY Fields */
#define CSR_ETHPHY_RX_INBAND_STATUS_LINK_STATUS_OFFSET 0
#define CSR_ETHPHY_RX_INBAND_STATUS_LINK_STATUS_SIZE 1
#define CSR_ETHPHY_RX_INBAND_STATUS_CLOCK_SPEED_OFFSET 1
#define CSR_ETHPHY_RX_INBAND_STATUS_CLOCK_SPEED_SIZE 2
#define CSR_ETHPHY_RX_INBAND_STATUS_DUPLEX_STATUS_OFFSET 3
#define CSR_ETHPHY_RX_INBAND_STATUS_DUPLEX_STATUS_SIZE 1
#define CSR_ETHPHY_MDIO_W_MDC_OFFSET 0
#define CSR_ETHPHY_MDIO_W_MDC_SIZE 1
#define CSR_ETHPHY_MDIO_W_OE_OFFSET 1
#define CSR_ETHPHY_MDIO_W_OE_SIZE 1
#define CSR_ETHPHY_MDIO_W_W_OFFSET 2
#define CSR_ETHPHY_MDIO_W_W_SIZE 1
#define CSR_ETHPHY_MDIO_R_R_OFFSET 0
#define CSR_ETHPHY_MDIO_R_R_SIZE 1

/* GPIO0 Registers */
#define CSR_GPIO0_BASE (CSR_BASE + 0x1000L)
#define CSR_GPIO0_OUT_ADDR (CSR_BASE + 0x1000L)
#define CSR_GPIO0_OUT_SIZE 1

/* GPIO0 Fields */

/* GPIO1 Registers */
#define CSR_GPIO1_BASE (CSR_BASE + 0x1800L)
#define CSR_GPIO1_OUT_ADDR (CSR_BASE + 0x1800L)
#define CSR_GPIO1_OUT_SIZE 1

/* GPIO1 Fields */

/* LEDS Registers */
#define CSR_LEDS_BASE (CSR_BASE + 0x2000L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x2000L)
#define CSR_LEDS_OUT_SIZE 1

/* LEDS Fields */

/* SERVO0 Registers */
#define CSR_SERVO0_BASE (CSR_BASE + 0x2800L)
#define CSR_SERVO0_ENABLE_ADDR (CSR_BASE + 0x2800L)
#define CSR_SERVO0_ENABLE_SIZE 1
#define CSR_SERVO0_WIDTH_ADDR (CSR_BASE + 0x2804L)
#define CSR_SERVO0_WIDTH_SIZE 1
#define CSR_SERVO0_PERIOD_ADDR (CSR_BASE + 0x2808L)
#define CSR_SERVO0_PERIOD_SIZE 1

/* SERVO0 Fields */

/* SERVO1 Registers */
#define CSR_SERVO1_BASE (CSR_BASE + 0x3000L)
#define CSR_SERVO1_ENABLE_ADDR (CSR_BASE + 0x3000L)
#define CSR_SERVO1_ENABLE_SIZE 1
#define CSR_SERVO1_WIDTH_ADDR (CSR_BASE + 0x3004L)
#define CSR_SERVO1_WIDTH_SIZE 1
#define CSR_SERVO1_PERIOD_ADDR (CSR_BASE + 0x3008L)
#define CSR_SERVO1_PERIOD_SIZE 1

/* SERVO1 Fields */

/* SERVO2 Registers */
#define CSR_SERVO2_BASE (CSR_BASE + 0x3800L)
#define CSR_SERVO2_ENABLE_ADDR (CSR_BASE + 0x3800L)
#define CSR_SERVO2_ENABLE_SIZE 1
#define CSR_SERVO2_WIDTH_ADDR (CSR_BASE + 0x3804L)
#define CSR_SERVO2_WIDTH_SIZE 1
#define CSR_SERVO2_PERIOD_ADDR (CSR_BASE + 0x3808L)
#define CSR_SERVO2_PERIOD_SIZE 1

/* SERVO2 Fields */

/* SERVO3 Registers */
#define CSR_SERVO3_BASE (CSR_BASE + 0x4000L)
#define CSR_SERVO3_ENABLE_ADDR (CSR_BASE + 0x4000L)
#define CSR_SERVO3_ENABLE_SIZE 1
#define CSR_SERVO3_WIDTH_ADDR (CSR_BASE + 0x4004L)
#define CSR_SERVO3_WIDTH_SIZE 1
#define CSR_SERVO3_PERIOD_ADDR (CSR_BASE + 0x4008L)
#define CSR_SERVO3_PERIOD_SIZE 1

/* SERVO3 Fields */

/* SPIFLASH Registers */
#define CSR_SPIFLASH_BASE (CSR_BASE + 0x4800L)
#define CSR_SPIFLASH_SPI_CONTROL_ADDR (CSR_BASE + 0x4800L)
#define CSR_SPIFLASH_SPI_CONTROL_SIZE 1
#define CSR_SPIFLASH_SPI_STATUS_ADDR (CSR_BASE + 0x4804L)
#define CSR_SPIFLASH_SPI_STATUS_SIZE 1
#define CSR_SPIFLASH_SPI_MOSI_ADDR (CSR_BASE + 0x4808L)
#define CSR_SPIFLASH_SPI_MOSI_SIZE 2
#define CSR_SPIFLASH_SPI_MISO_ADDR (CSR_BASE + 0x4810L)
#define CSR_SPIFLASH_SPI_MISO_SIZE 2
#define CSR_SPIFLASH_SPI_CS_ADDR (CSR_BASE + 0x4818L)
#define CSR_SPIFLASH_SPI_CS_SIZE 1
#define CSR_SPIFLASH_SPI_LOOPBACK_ADDR (CSR_BASE + 0x481cL)
#define CSR_SPIFLASH_SPI_LOOPBACK_SIZE 1

/* SPIFLASH Fields */
#define CSR_SPIFLASH_SPI_CONTROL_START_OFFSET 0
#define CSR_SPIFLASH_SPI_CONTROL_START_SIZE 1
#define CSR_SPIFLASH_SPI_CONTROL_LENGTH_OFFSET 8
#define CSR_SPIFLASH_SPI_CONTROL_LENGTH_SIZE 8
#define CSR_SPIFLASH_SPI_STATUS_DONE_OFFSET 0
#define CSR_SPIFLASH_SPI_STATUS_DONE_SIZE 1
#define CSR_SPIFLASH_SPI_STATUS_MODE_OFFSET 1
#define CSR_SPIFLASH_SPI_STATUS_MODE_SIZE 1
#define CSR_SPIFLASH_SPI_CS_SEL_OFFSET 0
#define CSR_SPIFLASH_SPI_CS_SEL_SIZE 1
#define CSR_SPIFLASH_SPI_CS_MODE_OFFSET 16
#define CSR_SPIFLASH_SPI_CS_MODE_SIZE 1
#define CSR_SPIFLASH_SPI_LOOPBACK_MODE_OFFSET 0
#define CSR_SPIFLASH_SPI_LOOPBACK_MODE_SIZE 1

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* CTRL Access Functions */
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}

/* ETHPHY Access Functions */
static inline uint32_t ethphy_crg_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void ethphy_crg_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
static inline uint32_t ethphy_rx_inband_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline uint32_t ethphy_mdio_w_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}
static inline void ethphy_mdio_w_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x808L));
}
static inline uint32_t ethphy_mdio_r_read(void) {
	return csr_read_simple((CSR_BASE + 0x80cL));
}

/* GPIO0 Access Functions */
static inline uint32_t gpio0_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline void gpio0_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000L));
}

/* GPIO1 Access Functions */
static inline uint32_t gpio1_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
static inline void gpio1_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1800L));
}

/* LEDS Access Functions */
static inline uint32_t leds_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}

/* SERVO0 Access Functions */
static inline uint32_t servo0_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}
static inline void servo0_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2800L));
}
static inline uint32_t servo0_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x2804L));
}
static inline void servo0_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2804L));
}
static inline uint32_t servo0_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x2808L));
}
static inline void servo0_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2808L));
}

/* SERVO1 Access Functions */
static inline uint32_t servo1_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void servo1_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
static inline uint32_t servo1_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}
static inline void servo1_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3004L));
}
static inline uint32_t servo1_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x3008L));
}
static inline void servo1_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3008L));
}

/* SERVO2 Access Functions */
static inline uint32_t servo2_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3800L));
}
static inline void servo2_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3800L));
}
static inline uint32_t servo2_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x3804L));
}
static inline void servo2_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3804L));
}
static inline uint32_t servo2_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x3808L));
}
static inline void servo2_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3808L));
}

/* SERVO3 Access Functions */
static inline uint32_t servo3_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4000L));
}
static inline void servo3_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4000L));
}
static inline uint32_t servo3_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x4004L));
}
static inline void servo3_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4004L));
}
static inline uint32_t servo3_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x4008L));
}
static inline void servo3_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4008L));
}

/* SPIFLASH Access Functions */
static inline uint32_t spiflash_spi_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x4800L));
}
static inline void spiflash_spi_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4800L));
}
static inline uint32_t spiflash_spi_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x4804L));
}
static inline uint64_t spiflash_spi_mosi_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x4808L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x480cL));
	return r;
}
static inline void spiflash_spi_mosi_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x4808L));
	csr_write_simple(v, (CSR_BASE + 0x480cL));
}
static inline uint64_t spiflash_spi_miso_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x4810L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x4814L));
	return r;
}
static inline uint32_t spiflash_spi_cs_read(void) {
	return csr_read_simple((CSR_BASE + 0x4818L));
}
static inline void spiflash_spi_cs_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4818L));
}
static inline uint32_t spiflash_spi_loopback_read(void) {
	return csr_read_simple((CSR_BASE + 0x481cL));
}
static inline void spiflash_spi_loopback_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x481cL));
}
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
